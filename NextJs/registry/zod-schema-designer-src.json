{
  "name": "zod-schema-designer",
  "type": "registry:ui",
  "registryDependencies": [
    "badge",
    "button",
    "dialog",
    "input",
    "label",
    "select",
    "separator",
    "switch",
    "tooltip"
  ],
  "dependencies": [
    "zod",
    "lucide-react",
    "@radix-ui/react-dialog",
    "@radix-ui/react-label",
    "@radix-ui/react-select",
    "@radix-ui/react-separator",
    "@radix-ui/react-switch",
    "@radix-ui/react-tooltip"
  ],
  "devDependencies": [],
  "tailwind": {
    "config": {}
  },
  "cssVars": {},
  "files": [
    {
      "path": "zod-schema-designer.tsx",
      "target": "src/components/zod-schema-designer/zod-schema-designer.tsx",
      "content": "'use client'\n\nimport React, { useState, useEffect } from 'react'\nimport { Button } from \"@/components/ui/button\"\nimport { Copy, Check, Save, X } from 'lucide-react'\nimport { SchemaField, ZodSchemaDesignerProps } from './types'\nimport { SchemaFieldEditor } from './schema-field-editor'\nimport { PropertiesPanel } from './properties-panel'\nimport { generateZodSchema, zodToJson } from './schema-utils'\nimport { z } from 'zod'\n\nexport function ZodSchemaDesigner({ initialSchema, onSave, showGeneratedCode = true }: ZodSchemaDesignerProps) {\n  const [schema, setSchema] = useState<SchemaField>(\n    initialSchema instanceof z.ZodType ? zodToJson(initialSchema) : initialSchema\n  );\n  const [selectedField, setSelectedField] = useState<SchemaField | null>(null);\n  const [isCopied, setIsCopied] = useState(false);\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [newField, setNewField] = useState<SchemaField | null>(null);\n  const [showPropertiesPanel, setShowPropertiesPanel] = useState(false);\n\n  useEffect(() => {\n    setSchema(initialSchema instanceof z.ZodType ? zodToJson(initialSchema) : initialSchema);\n    setSelectedField(null);\n    setHasUnsavedChanges(false);\n    setNewField(null);\n  }, [initialSchema]);\n\n  const getAllFieldNames = (field: SchemaField): string[] => {\n    let names: string[] = [field.name];\n    if (field.children) {\n      names = names.concat(field.children.flatMap(getAllFieldNames));\n    }\n    return names;\n  };\n\n  const availableFields = getAllFieldNames(schema);\n\n  const handleSave = () => {\n    onSave(schema);\n    setHasUnsavedChanges(false);\n  };\n\n  const handleSchemaUpdate = (updatedSchema: SchemaField) => {\n    setSchema(updatedSchema);\n    setHasUnsavedChanges(true);\n  };\n\n  const handleFieldUpdate = (updatedField: SchemaField) => {\n    setSchema(prevSchema => {\n      const updateFieldRecursive = (field: SchemaField): SchemaField => {\n        if (field === selectedField) {\n          return updatedField;\n        }\n        if (field.children) {\n          return {\n            ...field,\n            children: field.children.map(updateFieldRecursive)\n          };\n        }\n        return field;\n      };\n      return updateFieldRecursive(prevSchema);\n    });\n    setSelectedField(updatedField);\n    setNewField(null);\n    setHasUnsavedChanges(true);\n  };\n\n  const handleFieldDelete = () => {\n    setSchema(prevSchema => {\n      const deleteFieldRecursive = (field: SchemaField): SchemaField | null => {\n        if (field === selectedField) {\n          return null;\n        }\n        if (field.children) {\n          const updatedChildren = field.children\n            .map(deleteFieldRecursive)\n            .filter((child): child is SchemaField => child !== null);\n          return { ...field, children: updatedChildren };\n        }\n        return field;\n      };\n      const updatedSchema = deleteFieldRecursive(prevSchema);\n      return updatedSchema || prevSchema;\n    });\n    setSelectedField(null);\n    setShowPropertiesPanel(false);\n    setHasUnsavedChanges(true);\n  };\n\n  const handleCopyCode = () => {\n    const code = generateZodSchema(schema);\n    navigator.clipboard.writeText(code).then(() => {\n      setIsCopied(true);\n      setTimeout(() => setIsCopied(false), 2000);\n    });\n  };\n\n  const handleAddField = (newField: SchemaField) => {\n    setSelectedField(newField);\n    setNewField(newField);\n    setShowPropertiesPanel(true);\n  };\n\n  return (\n    <div className=\"flex h-full relative\">\n      <div className={`w-full md:w-2/3 overflow-auto transition-all ${showPropertiesPanel ? 'hidden md:block' : 'block'}`}>\n        <div className=\"p-4\">\n          <SchemaFieldEditor\n            field={schema}\n            onUpdate={handleSchemaUpdate}\n            onDelete={() => {}}\n            depth={0}\n            availableFields={availableFields}\n            selectedField={selectedField}\n            onSelectField={handleAddField}\n            isNewField={newField === schema}\n          />\n        </div>\n        {showGeneratedCode && (\n          <div className=\"p-4 border-t\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-semibold\">Generated Zod Schema</h3>\n              <Button onClick={handleCopyCode} className=\"flex items-center\">\n                {isCopied ? <Check className=\"w-4 h-4 mr-2\" /> : <Copy className=\"w-4 h-4 mr-2\" />}\n                {isCopied ? 'Copied!' : 'Copy'}\n              </Button>\n            </div>\n            <pre className=\"bg-gray-100 p-4 rounded-md overflow-x-auto text-sm\">\n              <code>{generateZodSchema(schema)}</code>\n            </pre>\n          </div>\n        )}\n      </div>\n      {selectedField && (\n        <div className={`fixed md:relative top-0 left-0 w-full md:w-1/3 h-full bg-white overflow-auto border-l transition-all ${showPropertiesPanel ? 'block' : 'hidden md:block'}`}>\n          <div className=\"flex items-center justify-between p-4 border-b md:hidden\">\n            <h2 className=\"text-lg font-semibold\">Properties</h2>\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => setShowPropertiesPanel(false)}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <PropertiesPanel\n            field={selectedField}\n            onUpdate={handleFieldUpdate}\n            onDelete={handleFieldDelete}\n            availableFields={availableFields}\n          />\n        </div>\n      )}\n      <div className=\"absolute bottom-4 right-4\">\n        <Button\n          onClick={handleSave}\n          disabled={!hasUnsavedChanges}\n          className=\"flex items-center\"\n        >\n          <Save className=\"w-4 h-4 mr-2\" />\n          Save Changes\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n",
      "type": "registry:ui"
    },
    {
      "path": "validation-editor.tsx",
      "target": "src/components/zod-schema-designer/validation-editor.tsx",
      "content": "import React from 'react'\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { SchemaType, ValidationOptions } from './types'\n\ninterface ValidationEditorProps {\n  type: SchemaType;\n  validations: ValidationOptions;\n  onChange: (validations: ValidationOptions) => void;\n}\n\nexport function ValidationEditor({ type, validations, onChange }: ValidationEditorProps) {\n  const handleChange = (key: keyof ValidationOptions, value: string | boolean | number | undefined) => {\n    onChange({\n      ...validations,\n      [key]: value\n    });\n  };\n\n  return (\n    <div className=\"grid gap-4\">\n      <div className=\"flex items-center space-x-2\">\n        <Switch\n          id=\"required\"\n          checked={validations.required !== false}\n          onCheckedChange={(checked) => handleChange('required', checked)}\n        />\n        <Label htmlFor=\"required\">Required</Label>\n      </div>\n\n      {(type === 'string' || type === 'number' || type === 'array') && (\n        <>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"min\" className=\"text-right\">\n              Min\n            </Label>\n            <Input\n              id=\"min\"\n              type={type === 'number' ? 'number' : 'text'}\n              value={validations.min || ''}\n              onChange={(e) => handleChange('min', type === 'number' ? Number(e.target.value) : e.target.value)}\n              className=\"col-span-3\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"max\" className=\"text-right\">\n              Max\n            </Label>\n            <Input\n              id=\"max\"\n              type={type === 'number' ? 'number' : 'text'}\n              value={validations.max || ''}\n              onChange={(e) => handleChange('max', type === 'number' ? Number(e.target.value) : e.target.value)}\n              className=\"col-span-3\"\n            />\n          </div>\n        </>\n      )}\n\n      {type === 'string' && (\n        <div className=\"grid grid-cols-4 items-center gap-4\">\n          <Label htmlFor=\"regex\" className=\"text-right\">\n            Regex\n          </Label>\n          <Input\n            id=\"regex\"\n            value={validations.regex || ''}\n            onChange={(e) => handleChange('regex', e.target.value)}\n            className=\"col-span-3\"\n          />\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-4 items-center gap-4\">\n        <Label htmlFor=\"default\" className=\"text-right\">\n          Default\n        </Label>\n        <Input\n          id=\"default\"\n          value={validations.default || ''}\n          onChange={(e) => handleChange('default', e.target.value)}\n          placeholder={type === 'date' ? 'YYYY-MM-DD' : ''}\n          className=\"col-span-3\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-4 items-center gap-4\">\n        <Label htmlFor=\"custom\" className=\"text-right\">\n          Custom\n        </Label>\n        <Input\n          id=\"custom\"\n          value={validations.custom || ''}\n          onChange={(e) => handleChange('custom', e.target.value)}\n          className=\"col-span-3\"\n        />\n      </div>\n    </div>\n  );\n}\n\n",
      "type": "registry:ui"
    },
    {
      "path": "types.ts",
      "target": "src/components/zod-schema-designer/types.ts",
      "content": "import { z } from 'zod';\n\nexport type SchemaType = 'string' | 'number' | 'boolean' | 'array' | 'object' | 'enum' | 'union' | 'date' | 'file' | 'calculated';\n\nexport interface ValidationOptions {\n  required?: boolean;\n  min?: number;\n  max?: number;\n  regex?: string;\n  custom?: string;\n  default?: string;\n}\n\nexport interface CalculatedFieldOptions {\n  dependencies: string[];\n  formula: string;\n}\n\nexport interface SchemaField {\n  name: string;\n  type: SchemaType;\n  description?: string;\n  children?: SchemaField[];\n  enumValues?: string[];\n  validations?: ValidationOptions;\n  label?: string;\n  calculatedField?: CalculatedFieldOptions;\n}\n\nexport type InitialSchema = SchemaField | z.ZodTypeAny;\n\nexport interface ZodSchemaDesignerProps {\n  initialSchema: InitialSchema;\n  onSave: (schema: SchemaField) => void;\n  showGeneratedCode?: boolean;\n}\n\n",
      "type": "registry:ui"
    },
    {
      "path": "schema-utils.ts",
      "target": "src/components/zod-schema-designer/schema-utils.ts",
      "content": "import { SchemaField, SchemaType, ValidationOptions } from './types'\nimport { z } from 'zod'\n\nexport const getSimpleValidationView = (type: SchemaType, validations?: ValidationOptions): string => {\n  if (!validations) return ''\n  const parts = []\n  if (validations.required) parts.push('required')\n  if (validations.min !== undefined) parts.push(`min: ${validations.min}`)\n  if (validations.max !== undefined) parts.push(`max: ${validations.max}`)\n  if (validations.regex) parts.push('regex')\n  if (validations.custom) parts.push('custom')\n  return parts.join(', ')\n}\n\nexport const generateZodSchema = (field: SchemaField): string => {\n  const generateField = (f: SchemaField): string => {\n    let schema = `z.${f.type}()`;\n    \n    if (f.type === 'number' || f.type === 'date') {\n      schema = `z.coerce.${f.type}()`;\n    }\n\n    if (f.validations) {\n      if (f.validations.required === false) schema += '.optional()';\n      if (f.validations.min !== undefined) schema += `.min(${f.validations.min})`;\n      if (f.validations.max !== undefined) schema += `.max(${f.validations.max})`;\n      if (f.validations.regex) schema += `.regex(/${f.validations.regex}/)`;\n      if (f.validations.custom) schema += `.refine(${f.validations.custom})`;\n      if (f.validations.default) {\n        const defaultValue = f.type === 'string' ? `\"${f.validations.default}\"` : f.validations.default;\n        schema += `.default(${defaultValue})`;\n      }\n    }\n\n    if (f.type === 'enum' && f.enumValues) {\n      schema = `z.enum([${f.enumValues.map(v => `'${v}'`).join(', ')}])`;\n    }\n\n    if (f.type === 'object' && f.children) {\n      const childSchemas = f.children.map(child => `${child.name}: ${generateField(child)}`).join(',\\n    ');\n      schema = `z.object({\\n    ${childSchemas}\\n  })`;\n    }\n\n    if (f.type === 'array' && f.children && f.children.length > 0) {\n      schema = `z.array(${generateField(f.children[0])})`;\n    }\n\n    if (f.type === 'calculated') {\n      schema = `z.function().implement((${f.calculatedField?.dependencies.join(', ')}) => ${f.calculatedField?.formula})`;\n    }\n\n    if (f.label || f.description) {\n      const describeArgs = [];\n      if (f.label) describeArgs.push(`\"${f.label}\"`);\n      if (f.description) describeArgs.push(`\"${f.description}\"`);\n      schema += `.describe(${describeArgs.join(', ')})`;\n    }\n\n    return schema;\n  };\n\n  return `import { z } from 'zod';\n\nconst ${field.name}Schema = ${generateField(field)};\n\nexport default ${field.name}Schema;`;\n}\n\nexport const zodToJson = (zodSchema: z.ZodTypeAny): SchemaField => {\n  const processZodType = (zodType: z.ZodTypeAny, name: string = 'root'): SchemaField => {\n    const field: SchemaField = { name, type: 'string' };\n\n    if (zodType instanceof z.ZodObject) {\n      field.type = 'object';\n      field.children = Object.entries(zodType.shape).map(([key, value]) => \n        processZodType(value as z.ZodTypeAny, key)\n      );\n    } else if (zodType instanceof z.ZodArray) {\n      field.type = 'array';\n      field.children = [processZodType(zodType.element, 'item')];\n    } else if (zodType instanceof z.ZodEnum) {\n      field.type = 'enum';\n      field.enumValues = zodType._def.values;\n    } else if (zodType instanceof z.ZodNumber) {\n      field.type = 'number';\n    } else if (zodType instanceof z.ZodBoolean) {\n      field.type = 'boolean';\n    } else if (zodType instanceof z.ZodDate) {\n      field.type = 'date';\n    }\n\n    field.validations = {};\n    if (zodType.isOptional()) {\n      field.validations.required = false;\n    }\n\n    if (zodType instanceof z.ZodNumber) {\n      if ('minimum' in zodType._def) field.validations.min = zodType._def.minimum as number;\n      if ('maximum' in zodType._def) field.validations.max = zodType._def.maximum as number;\n    }\n    \n    if (zodType instanceof z.ZodString && 'regex' in zodType._def) {\n      field.validations.regex = (zodType._def.regex as RegExp).source;\n    }\n\n    return field;\n  };\n\n  return processZodType(zodSchema);\n};\n\n",
      "type": "registry:ui"
    },
    {
      "path": "schema-field-editor.tsx",
      "target": "src/components/zod-schema-designer/schema-field-editor.tsx",
      "content": "import React, { useRef, useEffect } from 'react'\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\nimport { ChevronDown, Plus, HelpCircle } from 'lucide-react'\nimport { SchemaField } from './types'\nimport { getSimpleValidationView } from './schema-utils'\n\ninterface SchemaFieldEditorProps {\n  field: SchemaField;\n  onUpdate: (updatedField: SchemaField) => void;\n  onDelete: () => void;\n  depth: number;\n  availableFields: string[];\n  selectedField: SchemaField | null;\n  onSelectField: (field: SchemaField) => void;\n  isNewField?: boolean;\n}\n\nexport const SchemaFieldEditor: React.FC<SchemaFieldEditorProps> = ({ \n  field, \n  onUpdate, \n  depth, \n  availableFields, \n  selectedField, \n  onSelectField,\n  isNewField\n}) => {\n  const fieldRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (isNewField && fieldRef.current) {\n      fieldRef.current.scrollIntoView({ behavior: 'smooth' });\n      onSelectField(field);\n    }\n  }, [isNewField, field, onSelectField]);\n\n  const handleAddChild = () => {\n    const newChild: SchemaField = { name: 'New Field', type: 'string' }\n    const updatedChildren = [...(field.children || []), newChild]\n    onUpdate({ ...field, children: updatedChildren })\n    onSelectField(newChild)\n  }\n\n  const handleUpdateChild = (index: number, updatedChild: SchemaField) => {\n    const updatedChildren = [...(field.children || [])]\n    updatedChildren[index] = updatedChild\n    onUpdate({ ...field, children: updatedChildren })\n  }\n\n  const handleDeleteChild = (index: number) => {\n    const updatedChildren = (field.children || []).filter((_, i) => i !== index)\n    onUpdate({ ...field, children: updatedChildren })\n  }\n\n  return (\n    <div \n      id={`field-${field.name}`} \n      ref={fieldRef}\n      className={`mt-2 ${depth > 0 ? 'ml-4' : ''}`}\n    >\n      <div\n        className={`flex items-center cursor-pointer hover:bg-gray-100 p-1 rounded ${\n          selectedField === field ? 'bg-gray-100' : ''\n        }`}\n        onClick={() => onSelectField(field)}\n      >\n        {(field.type === 'object' || field.type === 'array') && (\n          <ChevronDown className=\"w-4 h-4 mr-1 -ml-4\" />\n        )}\n        <span className=\"font-semibold\">{field.name}</span>\n        <Badge variant=\"secondary\" className=\"ml-2\">{field.type}</Badge>\n        {field.validations && (\n          <span className=\"ml-2 text-sm text-gray-500\">\n            {getSimpleValidationView(field.type, field.validations)}\n          </span>\n        )}\n        {field.type === 'enum' && (\n          <span className=\"ml-2 text-sm text-gray-500\">\n            [{field.enumValues?.join(', ')}]\n          </span>\n        )}\n        {field.description && (\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <HelpCircle className=\"w-4 h-4 ml-2 text-gray-400\" />\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>{field.description}</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        )}\n      </div>\n      {(field.type === 'object' || field.type === 'array') && (\n        <div className=\"mt-2 ml-4\">\n          {field.children?.map((child, index) => (\n            <SchemaFieldEditor\n              key={index}\n              field={child}\n              onUpdate={(updatedChild) => handleUpdateChild(index, updatedChild)}\n              onDelete={() => handleDeleteChild(index)}\n              depth={depth + 1}\n              availableFields={availableFields}\n              selectedField={selectedField}\n              onSelectField={onSelectField}\n              isNewField={child.name === 'New Field'}\n            />\n          ))}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleAddChild}\n            className=\"mt-2 ml-4 border border-dashed border-gray-300 text-gray-500 hover:bg-gray-50\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" /> Add {field.type === 'array' ? 'Item' : 'Field'}\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n\n",
      "type": "registry:ui"
    },
    {
      "path": "properties-panel.tsx",
      "target": "src/components/zod-schema-designer/properties-panel.tsx",
      "content": "import React from 'react'\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { SchemaField, SchemaType } from './types'\nimport { ValidationEditor } from './validation-editor'\n\ninterface PropertiesPanelProps {\n  field: SchemaField;\n  onUpdate: (field: SchemaField) => void;\n  onDelete: () => void;\n  availableFields: string[];\n}\n\nexport function PropertiesPanel({ field, onUpdate, onDelete, availableFields }: PropertiesPanelProps) {\n  const handleChange = <K extends keyof SchemaField>(key: K, value: SchemaField[K]) => {\n    const updatedField = { ...field, [key]: value };\n    if (key === 'type') {\n      updatedField.validations = {};\n      updatedField.children = undefined;\n      updatedField.enumValues = undefined;\n      updatedField.calculatedField = undefined;\n    }\n    onUpdate(updatedField);\n  };\n\n  const handleCalculatedFieldChange = (dependencies?: string[], formula?: string) => {\n    const updatedField = {\n      ...field,\n      calculatedField: {\n        dependencies: dependencies || [],\n        formula: formula || ''\n      }\n    };\n    onUpdate(updatedField);\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div>\n        <h2 className=\"text-lg font-semibold mb-4 hidden md:block\">Properties</h2>\n        <div className=\"grid gap-4\">\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"name\" className=\"text-right\">\n              Name\n            </Label>\n            <Input\n              id=\"name\"\n              value={field.name}\n              onChange={(e) => handleChange('name', e.target.value)}\n              className=\"col-span-3\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"type\" className=\"text-right\">\n              Type\n            </Label>\n            <Select\n              value={field.type}\n              onValueChange={(value) => handleChange('type', value as SchemaType)}\n            >\n              <SelectTrigger className=\"col-span-3\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"string\">String</SelectItem>\n                <SelectItem value=\"number\">Number</SelectItem>\n                <SelectItem value=\"boolean\">Boolean</SelectItem>\n                <SelectItem value=\"date\">Date</SelectItem>\n                <SelectItem value=\"enum\">Enum</SelectItem>\n                <SelectItem value=\"array\">Array</SelectItem>\n                <SelectItem value=\"object\">Object</SelectItem>\n                <SelectItem value=\"calculated\">Calculated</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"label\" className=\"text-right\">\n              Label\n            </Label>\n            <Input\n              id=\"label\"\n              value={field.label || ''}\n              onChange={(e) => handleChange('label', e.target.value)}\n              className=\"col-span-3\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"description\" className=\"text-right\">\n              Description\n            </Label>\n            <Input\n              id=\"description\"\n              value={field.description || ''}\n              onChange={(e) => handleChange('description', e.target.value)}\n              className=\"col-span-3\"\n            />\n          </div>\n\n          {field.type === 'enum' && (\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"enumValues\" className=\"text-right\">\n                Values\n              </Label>\n              <Input\n                id=\"enumValues\"\n                value={field.enumValues?.join(', ') || ''}\n                onChange={(e) => handleChange('enumValues', e.target.value.split(',').map(v => v.trim()))}\n                placeholder=\"value1, value2, value3\"\n                className=\"col-span-3\"\n              />\n            </div>\n          )}\n\n          {field.type === 'calculated' && (\n            <>\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"dependencies\" className=\"text-right\">\n                  Dependencies\n                </Label>\n                <Select\n                  value={field.calculatedField?.dependencies?.[0] || ''}\n                  onValueChange={(value) => handleCalculatedFieldChange([value], field.calculatedField?.formula)}\n                >\n                  <SelectTrigger className=\"col-span-3\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableFields.map((fieldName) => (\n                      <SelectItem key={fieldName} value={fieldName}>\n                        {fieldName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-4 items-center gap-4\">\n                <Label htmlFor=\"formula\" className=\"text-right\">\n                  Formula\n                </Label>\n                <Input\n                  id=\"formula\"\n                  value={field.calculatedField?.formula || ''}\n                  onChange={(e) => handleCalculatedFieldChange(field.calculatedField?.dependencies, e.target.value)}\n                  className=\"col-span-3\"\n                />\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <Separator />\n\n      <div>\n        <h2 className=\"text-lg font-semibold mb-4\">Validations</h2>\n        <ValidationEditor\n          type={field.type}\n          validations={field.validations || {}}\n          onChange={(validations) => handleChange('validations', validations)}\n        />\n      </div>\n\n      {field.name !== 'root' && (\n        <>\n          <Separator />\n          <div className=\"flex justify-start\">\n            <Button variant=\"destructive\" onClick={onDelete}>\n              Delete Field\n            </Button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\n",
      "type": "registry:ui"
    },
    {
      "path": "calculated-field-editor.tsx",
      "target": "src/components/zod-schema-designer/calculated-field-editor.tsx",
      "content": "import React from 'react'\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Trash } from 'lucide-react'\nimport { CalculatedFieldOptions } from './types'\n\ninterface CalculatedFieldEditorProps {\n  calculatedField: CalculatedFieldOptions;\n  onChange: (calculatedField: CalculatedFieldOptions) => void;\n  availableFields: string[];\n}\n\nexport const CalculatedFieldEditor: React.FC<CalculatedFieldEditorProps> = ({ calculatedField, onChange, availableFields }) => {\n  const handleDependencyChange = (index: number, value: string) => {\n    const newDependencies = [...calculatedField.dependencies];\n    newDependencies[index] = value;\n    onChange({ ...calculatedField, dependencies: newDependencies });\n  };\n\n  const handleAddDependency = () => {\n    onChange({ ...calculatedField, dependencies: [...calculatedField.dependencies, ''] });\n  };\n\n  const handleRemoveDependency = (index: number) => {\n    const newDependencies = calculatedField.dependencies.filter((_, i) => i !== index);\n    onChange({ ...calculatedField, dependencies: newDependencies });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <Label>Dependencies</Label>\n        {calculatedField.dependencies.map((dep, index) => (\n          <div key={index} className=\"flex items-center mt-2\">\n            <Select value={dep} onValueChange={(value) => handleDependencyChange(index, value)}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select field\" />\n              </SelectTrigger>\n              <SelectContent>\n                {availableFields.map((field) => (\n                  <SelectItem key={field} value={field}>\n                    {field}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => handleRemoveDependency(index)} className=\"ml-2\">\n              <Trash className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        ))}\n        <Button variant=\"outline\" size=\"sm\" onClick={handleAddDependency} className=\"mt-2\">\n          Add Dependency\n        </Button>\n      </div>\n      <div>\n        <Label htmlFor=\"formula\">Formula</Label>\n        <Input\n          id=\"formula\"\n          value={calculatedField.formula}\n          onChange={(e) => onChange({ ...calculatedField, formula: e.target.value })}\n          placeholder=\"e.g., (a, b) => a + b\"\n        />\n      </div>\n    </div>\n  );\n};\n\n",
      "type": "registry:ui"
    }
  ]
}